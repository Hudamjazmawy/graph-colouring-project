/**
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Copyright 2013 Andrew.Ju (andrew@skynet.ie)    
 *
 */

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <sys/types.h>
#include <cstdlib>
#include <time.h>
#include <iostream>
#include <fstream>

using namespace std;
#define MAX_RAND (2.0*(1 << 30))
#define MAX_NODE 10000
#define TRUE 1
#define FALSE 0
#define INF 100000.0
int adj[MAX_NODE][MAX_NODE]; // adjacency matrix
int num_node;
int ColorClass[MAX_NODE];
int Order[MAX_NODE];
int Handled[MAX_NODE]; 
int ColorAdj[MAX_NODE][MAX_NODE];
int ColorCount[MAX_NODE]; 
int lb; // lower bound
int num_prob,max_prob;

int best_clique;

void read_graph_DIMACS_ascii(char *file) {
	/*
	 * read graph from .col file
	 */    
	int c, oc;
    	int order;
    	int i, j, numedges, edgecnt;
    	char tmp[80];
    	FILE *fp;
    
    	if ((fp = fopen(file, "r")) == NULL){
    		printf("ERROR: Cannot open input file\n");
    		exit(10);
    	}
    
    	for(oc = '\0'; (c = fgetc(fp)) != EOF && ((oc != '\0' && oc != '\n') || c != 'p'); oc = c)
        	;
    	if (!fscanf(fp, "%s %d %d\n", tmp, &order, &numedges)){
        	printf("ERROR: corrupted input file in p\n");
		exit(10);
    	}
    	num_node = order;
    	ungetc(c, fp);
    	
    	// 18-Mar-2012
    	for(i = 0; i < num_node; i++){
        	for(j = 0; j < num_node; j++)
            		adj[i][j] = FALSE;
    	}
    	edgecnt = 0;
    	while ((c = fgetc(fp)) != EOF){
        	switch (c){
            	case 'e':
                	if (!fscanf(fp, "%d %d", &i, &j))
			{
                    		printf("ERROR: corrupted input file\n");
                    		exit(10);
			}
                	edgecnt++;
                	i--; j--;
                	adj[i][j] = TRUE;
                	adj[j][i] = TRUE;
                	break;
            	case '\n':
            	default:
                	break;
		}
	}
    	fclose(fp);
	cout<<order<<" "<<numedges<<" ";
}

// -- start of code for finding a clique

int greedy_clique(int *valid, int *clique) {
	/*
	 * subfunction called by max_w_clique() function for finding a clique
	 */
    	int i, j, k;
    	int max;
    	int place,done;
    	int *order;
    	int weight[MAX_NODE];
    
    	for(i = 0; i < num_node; i++) clique[i] = 0;
    	order = (int *)calloc(num_node+1, sizeof(int));
    	place = 0;
    	for(i = 0; i < num_node; i++){
        	if(valid[i]){
            		order[place] = i;
            		place++;
        	}
    	}
    	for(i = 0; i < num_node; i++)
        	weight[i] = 0;
    	for(i = 0; i < num_node; i++){
        	if(!valid[i]) continue;
        	for(j = 0; j < num_node; j++){
            		if(!valid[j]) continue;
            		if(adj[i][j]) weight[i]++;
		}
    	}
    
    	done = FALSE;
    	while(!done){
        	done = TRUE;
        	for(i = 0; i < place-1; i++){
            		j = order[i];
            		k = order[i+1];
            		if(weight[j] < weight[k]){
                		order[i] = k;
                		order[i+1] = j;
                		done = FALSE;
            		}
        	}
    	}
    	
    	clique[order[0]] = TRUE;
    	for(i = 1; i < place; i++){
        	j = order[i];
        	for(k = 0; k < i; k++){
            		if (clique[order[k]] && !adj[j][order[k]]) break;
        	}
        	if(k == i){
            		clique[j] = TRUE;
        	}
        	else clique[j] = FALSE;
    	}
    	max = 0;
    	for(i = 0; i < place; i++) 
        	if (clique[order[i]]) max ++;
    
    	free(order);
    	return max;
}

int max_w_clique(int *valid, int *clique, int lower, int target) {
	/*
	 * to find a clique with size as large as possible
	 */
    	int start, j, k;
    	int incumb, new_weight;
    	int *valid1, *clique1;
    	int *order;
    	int *value;
    	int i, place, finish, done, place1;
    	int total_left;
    	num_prob++;
    	if(num_prob > max_prob) return -1;
    	for(j = 0; j < num_node; j++) clique[j] = 0;
    	total_left = 0;
    	for(i = 0; i < num_node; i++)
        	if(valid[i]) total_left++;
    	if(total_left < lower){
        	return 0;
    	}
	
    	order = (int *)calloc(num_node+1, sizeof(int));
    	value = (int *)calloc(num_node, sizeof(int));
    	incumb = greedy_clique(valid, clique);
    	if(incumb >= target) return incumb;
    	if(incumb > best_clique){
        	best_clique = incumb;
    	}
  
    	place = 0;
    	for(i = 0; i < num_node; i++){
      		if(clique[i]){
          		order[place] = i;
          		total_left --;
          		place++;
      		}
    	}
    	start = place;
    	for(i = 0; i < num_node; i++){
        	if(!clique[i] && valid[i]){
            		order[place] = i;
            		place++;
        	}
    	}
    	finish = place;
    	for(place = start; place < finish; place++){
        	i = order[place];
        	value[i] = 0;
        	for(j = 0; j < num_node; j++){
            		if(valid[j] && adj[i][j]) value[i]++;
        	}
    	}
	
    	done = FALSE;
    	while(!done){
        	done = TRUE;
        	for(place = start; place < finish-1; place++){
            		i = order[place];
            		j = order[place+1];
            		if(value[i] < value[j]){
                		order[place] = j;
                		order[place+1] = i;
                		done = FALSE;
            		}
        	}
    	}
	
    	free(value);
    	for(place = start; place < finish; place++){
        	if(incumb + total_left < lower){
            		return 0;
        	}
	
        	j = order[place];
        	total_left --;
		
        	if (clique[j]) continue;
		
        	valid1 = (int *)calloc(num_node, sizeof(int));
        	clique1 = (int *)calloc(num_node, sizeof(int));
        	for(place1 = 0;place1 < num_node; place1++) valid1[place1] = FALSE;
        	for(place1 = 0;place1 < place; place1++){
            		k = order[place1];
            		if (valid[k] && (adj[j][k])){
                		valid1[k] = TRUE;
            		}
            		else
                		valid1[k] = FALSE;
        	}
        	new_weight = max_w_clique(valid1, clique1, incumb-1, target-1);
        	if(new_weight+1 > incumb){
            		incumb = new_weight + 1;
            		for(k = 0; k < num_node; k++) clique[k] = clique1[k];
            		clique[j] = TRUE;
            		if(incumb > best_clique){
                		best_clique = incumb;
            		}
        	}

        	free(valid1);
        	free(clique1);
        	if (incumb >= target) break;
	}
    	free(order);
    	return(incumb);
}

// -- end of code for finding a clique

void AssignColor(int node, int color) {
	/*
	 * AssignColor function
	 */
	int node1;
	ColorClass[node] = color; // ColorClass[node] -> color that is assigned to vertex node, 0 means uncolored
	for(node1 = 0; node1 < num_node; node1++){
		if(node == node1) continue;
		if(adj[node][node1]){
			/*
			 * adj[node][node1] -> whether vertex node and vertex node1 is adjacent or not
			 */
			if(ColorAdj[node1][color] == 0) 
				/*
				 * if currently vertex node1 is not adjacent to any colored vertex with color color,
				 * then node1's saturation degree increased by 1
				 */
				ColorCount[node1]++;
			ColorAdj[node1][color]++;
			ColorAdj[node1][0]--; // vertex node1's degree in uncolored subgraph decreased by 1
			if(ColorAdj[node1][0] < 0)
				printf("ERROR on assign\n");
		}
	}
}

void print_colors() {
	/*
	 * print out bestColoring
	 */
	int i, j;
	//printf("Best coloring is %d\n", BestColoring);
	for(i = 0; i < num_node; i++)
		for(j = 0; j < num_node; j++){
			if(i == j) continue;
			if(adj[i][j] && (ColorClass[i] == ColorClass[j]))
				printf("Error with nodes %d and %d and color %d\n", i, j, ColorClass[i]);
		}
}

int color(int i, int current_color) {
	/*
	 * core DSATUR function
	 */
    	int j, new_val;
    	int k, max, count, place;

	while(i < num_node) {
		max = -1;
		place = -1;
    		max = -1;
    		place = -1;
    		for(k = 0; k < num_node; k++){
			/*
			 * Handled[k] -> whether vertex k is colored or not
			 */
        		if(Handled[k]) continue;
        		if((ColorCount[k] > max) || ((ColorCount[k] == max) && (ColorAdj[k][0] > ColorAdj[place][0]))){	
				/*
				 * ColorCount[k] -> saturation degree of vertex k
			 	 * ColorAdj[k][0] -> degree of vertex k in uncolored subgraph
			 	 * select vertex with maximum saturation degree; in case of ties, the 
			 	 * vertex with maximum degree in uncolored subgraph is selected
			 	 */
            			max = ColorCount[k];
	    			place = k;
        		}
    		}
    		if(place == -1){
        		printf("Graph is disconnected.  This code needs to be updated for that case.\n");
        		exit(1);
    		}

		Order[i] = place;
		Handled[place] = TRUE;
		for(j = 1; j <= current_color; j++) {
			if(!ColorAdj[place][j]){
				/*
				 * ColorAdj[place][j] -> whether vertex place is adjacent to colored vertex with color j
				 */
				ColorClass[place] = j;
				AssignColor(place, j);
				break;
			}
		}
		if(ColorClass[place] == 0) {
			current_color++;
			ColorClass[place] = current_color;
			AssignColor(place, current_color);
		}
		i++;
	}
	return current_color;
		
}

int main(int argc, char** argv) {
	/*
	 * main function
	 */
    	int i, j, val;
    	int valid[MAX_NODE], clique[MAX_NODE];
    	int place;

	if(argc != 2){
		cerr<<argv[0]<<" <dimacs_file>"<<endl;
		return 1;
	}
	read_graph_DIMACS_ascii(argv[1]); // read graph from .col file
	for(i = 0; i < num_node; i++)
		for(j = 0; j < num_node; j++)
			ColorAdj[i][j] = 0;
	for(i = 0; i < num_node; i++)
		for(j = 0; j < num_node; j++)
			if(adj[i][j]) ColorAdj[i][0]++;
	for(i = 0; i < num_node; i++){
		ColorCount[i] = 0;
		ColorClass[i] = 0;
	}
	for(i = 0; i < num_node; i++)
		Handled[i] = FALSE;
	for(i = 0; i < num_node; i++) valid[i] = TRUE;
	best_clique = 0;
	num_prob = 0;
	max_prob = 100000;
	clock_t start1 = clock();
	lb = max_w_clique(valid, clique, 0, num_node); // find a clique
	clock_t start2 = clock();
	place = 0;
	for(i = 0; i < num_node; i++){
		if(clique[i]){
			Order[place] = i;
			Handled[i] = TRUE;
			place++;
			AssignColor(i, place);
			for(j = 0; j < num_node; j++)
				if((i != j) && clique[j] && (!adj[i][j]))
					printf("Result is not a clique!\n");
		}
	}
	
	const char *str = (num_prob >= max_prob)? "TBC": "C"; 	
	val = color(place, place); // color function

	printf("|l|: %d(%s) |X-h|: %d ", lb, str, val);
	clock_t ends = clock();
	cout<<"Time: "<<(double) (ends - start2) /CLOCKS_PER_SEC<<" "<<(double) (ends - start1) /CLOCKS_PER_SEC<<" (DSATUR-h)"<<endl;
}
	

	  
